#!/usr/bin/env bash
set -euo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
BASE_SCRIPT="${ROOT_DIR}/scripts/lcod"
LIB_FILE="${ROOT_DIR}/scripts/lib/common.sh"
OUTPUT_DIR="${ROOT_DIR}/dist"
OUTPUT_FILE="${OUTPUT_DIR}/lcod"

if [[ ! -f "${BASE_SCRIPT}" || ! -f "${LIB_FILE}" ]]; then
  echo "Missing source files." >&2
  exit 1
fi

mkdir -p "${OUTPUT_DIR}"

ROOT_ENV="${ROOT_DIR}" python3 <<'PY'
import os
from datetime import datetime, timezone
from pathlib import Path

root = Path(os.environ['ROOT_ENV'])
base_lines = (root / 'scripts' / 'lcod').read_text().splitlines()
lib_text = (root / 'scripts' / 'lib' / 'common.sh').read_text().rstrip('\n')
out_path = root / 'dist' / 'lcod'

try:
    start_idx = next(i for i, line in enumerate(base_lines) if line.strip().startswith('print_help()'))
except StopIteration:
    raise SystemExit('Could not find print_help() in base script')

with out_path.open('w', encoding='utf-8') as fh:
    fh.write('#!/usr/bin/env bash\n')
    fh.write(f'# Auto-generated by scripts/build-bundle.sh on {datetime.now(timezone.utc):%Y-%m-%dT%H:%M:%SZ}\n')
    fh.write('set -eo pipefail\n\n')
    fh.write('# ---- Inlined common library ----\n')
    fh.write(lib_text)
    fh.write('\n\n# ---- CLI entrypoint ----\n')
    fh.write('\n'.join(base_lines[start_idx:]))
    fh.write('\n')
PY

chmod +x "${OUTPUT_FILE}"
echo "Bundle written to ${OUTPUT_FILE}"
